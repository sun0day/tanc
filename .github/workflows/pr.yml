name: PR Build and Test

on:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.c'
      - '**/*.h'
      - '**/CMakeLists.txt'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.c'
      - '**/*.h'
      - '**/CMakeLists.txt'
      - '.github/workflows/**'
      - '.clang-format*'
env:
  INSTALL_PREFIX: /usr
  BUILD_TYPE: Release
  TEST_RUN: '1'

jobs:
  check_format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install clang-format
      run: sudo apt-get install -y clang-format
    - name: Check Formatting
      run: |
        find . -name '*.c' -o -name '*.h' | xargs clang-format --dry-run --Werror

  build_test_on_windows:
    permissions:
      contents: write
    strategy:
      matrix:
        arch: [x64, arm64]
        c_compiler: [cl]

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup MSVC ARM64 Toolchain
      if: ${{ matrix.arch == 'arm64' }}
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsamd64_arm64.bat"
        set >> %GITHUB_ENV%

    - name: Configure CMake 
      shell: bash
      run: |
        mkdir build
        cd build
        cmake .. \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
        -A ${{ matrix.arch }}
    
    - name: Build library
      shell: bash
      run: cmake --build ./build --config $BUILD_TYPE

    - name: Test library 
      if: ${{ matrix.arch == 'x64' }}
      shell: bash
      run: ./test.sh

    - name: Verify library on arm64
      if: ${{ matrix.arch == 'arm64' }}
      shell: cmd
      run: dumpbin /headers build\lib\list\Release\list_test.exe | findstr "machine"

  build_test_on_ubuntu_x86:
    permissions:
      contents: write
    strategy:
      matrix:
        arch: [x86_64]
        c_compiler: [gcc, clang]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake 
      shell: bash
      run: |
        export ASAN=1
        mkdir build
        cd build
        cmake .. \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    
    - name: Build library
      shell: bash
      run: |
        cmake --build ./build --config $BUILD_TYPE
        file ./build/lib/list/list_test

    - name: Test library
      shell: bash
      run: chmod +x ./test.sh && ./test.sh

    - name: Test installation
      run: sudo cmake --install ./build

  build_test_on_qemu:
    permissions:
      contents: write
    strategy:
      matrix:
        arch: [linux/386, linux/riscv64, linux/arm64, linux/arm/v6, linux/arm/v7, linux/s390x]
        c_compiler: [gcc]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.arch }}

      - name: Build and test
        shell: bash
        run: |
          docker run \
          --rm \
          -v $(pwd):/${{ github.workspace }} \
          -w ${{ github.workspace }} \
          -e C_COMPILER=${{ matrix.c_compiler }} \
          -e BUILD_TYPE=$BUILD_TYPE \
          -e TEST_RUN=$TEST_RUN \
          --platform ${{ matrix.arch }} \
          debian:unstable-slim \
          sh -c "chmod +x ./qemu.sh && ./qemu.sh"
            

  build_test_on_macos:
    permissions:
      contents: write
    strategy:
      matrix:
        arch: [x86_64, arm64]
        c_compiler: [clang]

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake 
      shell: bash
      run: |
        export ASAN=1
        mkdir build
        cd build
        cmake .. \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
        -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}
    
    - name: Build library
      shell: bash
      run: |
        cmake --build ./build --config $BUILD_TYPE

    - name: Test library 
      shell: bash
      run: chmod +x ./test.sh && ./test.sh

  build_test_on_bsd:
    permissions:
      contents: write
    strategy:
      matrix:
        os: [freebsd, openbsd, netbsd]
        arch: [x86-64, arm64]
        c_compiler: [clang, gcc]
        include:
        - os: freebsd
          version: '14.2'
        - os: openbsd
          version: '7.6'
        - os: netbsd
          version: '10.1'
        exclude:
        - os: netbsd
          c_compiler: clang
        - os: freebsd
          c_compiler: gcc
        - os: openbsd
          c_compiler: gcc

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build and test
      uses: cross-platform-actions/action@v0.27.0
      env:
        BUILD_TYPE: ${{ env.BUILD_TYPE }}
        TEST_RUN: ${{ env.TEST_RUN }}
      with:
        operating_system: ${{ matrix.os }}
        architecture: ${{ matrix.arch }}
        version: ${{ matrix.version }}
        shell: bash
        memory: 5G
        cpu_count: 4
        environment_variables: 'BUILD_TYPE TEST_RUN'
        run: |
          case "${{ matrix.os }}" in
            freebsd)  sudo pkg install -y -f cmake ;;
            netbsd)   sudo pkgin -y update && sudo pkgin -y install cmake ;;
            openbsd) sudo pkg_add -u && sudo pkg_add install cmake ;;
          esac
          mkdir build && cd build
          cmake .. \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }}
          cd ..
          cmake --build ./build --config $BUILD_TYPE
          file ./build/lib/list/list_test
          chmod +x ./test.sh && ./test.sh